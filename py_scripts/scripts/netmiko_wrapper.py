import os
import textfsm
from netmiko import ConnectHandler
from netmiko.exceptions import ReadTimeout
import logging

# C·∫•u h√¨nh logging thay v√¨ d√πng print
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

def get_custom_template(device_type, command):
    """T√¨m template t√πy ch·ªânh d·ª±a tr√™n v·ªã tr√≠ c·ªßa file script n√†y."""
    # Normalize t√™n l·ªánh
    command_norm = command.lower().strip().replace(" ", "_").replace("/", "_")
    template_name = f"{device_type}_{command_norm}.textfsm"
    
    # X√¢y d·ª±ng ƒë∆∞·ªùng d·∫´n tuy·ªát ƒë·ªëi ƒë·∫øn th∆∞ m·ª•c 'templates' c√πng c·∫•p v·ªõi script n√†y
    script_dir = os.path.dirname(os.path.abspath(__file__))
    template_dir = os.path.join(script_dir, "templates")
    full_path = os.path.join(template_dir, template_name)
    
    logging.info(f"üîç T√¨m ki·∫øm template t√πy ch·ªânh: {full_path}")
    return full_path if os.path.exists(full_path) else None

def parse_custom_template(output, template_path):
    """Ph√¢n t√≠ch output v·ªõi m·ªôt template TextFSM c·ª• th·ªÉ."""
    with open(template_path) as template_file:
        fsm = textfsm.TextFSM(template_file)
        return fsm.ParseTextToDicts(output)

def smart_send_command(device, command, prefer_custom=False):
    """
    G·ª≠i l·ªánh t·ªõi thi·∫øt b·ªã.
    - N·∫øu prefer_custom=True: ∆Øu ti√™n 1 l√† template t√πy ch·ªânh, 2 l√† NTC, 3 l√† raw.
    - N·∫øu prefer_custom=False (m·∫∑c ƒë·ªãnh): ∆Øu ti√™n 1 l√† NTC, 2 l√† t√πy ch·ªânh, 3 l√† raw.
    """
    with ConnectHandler(**device) as conn:
        # LU·ªíNG 1: ∆Øu ti√™n template t√πy ch·ªânh
        if prefer_custom:
            template_path = get_custom_template(device['device_type'], command)
            if template_path:
                logging.info(f"‚úÖ ∆Øu ti√™n d√πng template t√πy ch·ªânh: {template_path}")
                raw_output = conn.send_command(command, use_textfsm=False)
                return parse_custom_template(raw_output, template_path)
            else:
                logging.warning("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y template t√πy ch·ªânh, fallback v·ªÅ NTC-Templates.")
                # N·∫øu kh√¥ng c√≥ template t√πy ch·ªânh, ch·∫°y logic NTC nh∆∞ b√¨nh th∆∞·ªùng
                # Netmiko s·∫Ω tr·∫£ v·ªÅ list n·∫øu parse th√†nh c√¥ng, ho·∫∑c string n·∫øu th·∫•t b·∫°i
                return conn.send_command(command, use_textfsm=True, read_timeout=120)

        # LU·ªíNG 2: ∆Øu ti√™n NTC-Templates (m·∫∑c ƒë·ªãnh)
        # 1. Th·ª≠ d√πng NTC-Templates tr∆∞·ªõc
        try:
            # TƒÉng read_timeout ƒë·ªÉ tr√°nh l·ªói khi parsing l√¢u
            parsed_output = conn.send_command(command, use_textfsm=True, read_timeout=120)
            # Netmiko tr·∫£ v·ªÅ list n·∫øu parse th√†nh c√¥ng, ho·∫∑c string n·∫øu kh√¥ng c√≥ template
            if isinstance(parsed_output, list) and parsed_output:
                logging.info("‚úÖ Ph√¢n t√≠ch th√†nh c√¥ng b·∫±ng NTC-Templates.")
                return parsed_output
            # N·∫øu tr·∫£ v·ªÅ string, n√≥ s·∫Ω ƒë∆∞·ª£c x·ª≠ l√Ω ·ªü d∆∞·ªõi nh∆∞ l√† raw_output
            raw_output = str(parsed_output)

        except ReadTimeout:
            # ReadTimeout th∆∞·ªùng x·∫£y ra khi use_textfsm=True nh∆∞ng kh√¥ng c√≥ template
            logging.warning("ReadTimeout khi d√πng NTC, c√≥ th·ªÉ do kh√¥ng c√≥ template. L·∫•y output th√¥.")
            raw_output = conn.send_command(command, use_textfsm=False)

        # 2. N·∫øu NTC kh√¥ng th√†nh c√¥ng, th·ª≠ template t√πy ch·ªânh
        template_path = get_custom_template(device['device_type'], command)
        if template_path:
            logging.warning(f"‚ö†Ô∏è NTC template kh√¥ng c√≥ ho·∫∑c kh√¥ng kh·ªõp, d√πng template t√πy ch·ªânh: {template_path}")
            return parse_custom_template(raw_output, template_path)
        
        # 3. N·∫øu c·∫£ hai ƒë·ªÅu kh√¥ng ƒë∆∞·ª£c, tr·∫£ v·ªÅ output th√¥
        logging.warning("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y template NTC hay template t√πy ch·ªânh. Tr·∫£ v·ªÅ output th√¥.")
        return raw_output
